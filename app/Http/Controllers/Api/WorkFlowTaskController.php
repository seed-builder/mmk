<?php

namespace App\Http\Controllers\Api;

use App\Services\WorkFlow\Engine;
use App\Services\WorkFlow\WorkFlowException;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Http\Request;
use App\Http\Controllers\Api\ApiController;
use App\Models\Busi\WorkFlowTask;

class WorkFlowTaskController extends ApiController
{
	//
	public function newEntity(array $attributes = [])
	{
		// TODO: Implement newEntity() method.
		return new WorkFlowTask($attributes);
	}

	public function show($id)
	{
		//return parent::show($id); // TODO: Change the autogenerated stub
		if ($id == 0) {
			return response('{}', 404);
		} else {
			$entity = WorkFlowTask::with(['instance.variables', 'instance.sponsor','workflow'])->find($id);
			// var_dump($entity);
			return response($entity, 200);
		}
	}

	public function fillQueryForIndex(Request $request, Builder &$query)
	{
		$query->with(['instance.variables', 'instance.sponsor', 'workflow']);
		parent::fillQueryForIndex($request, $query); // TODO: Change the autogenerated stub
		$query->where('pre_task_id', '>', 0);
	}

	/**
	 * 批量同意，审批通过
	 * @param Request $request
	 * @return \Illuminate\Contracts\Routing\ResponseFactory|\Symfony\Component\HttpFoundation\Response
	 * @internal param $id
	 */
	public function batchAgree(Request $request){
		$ids = $request->input('ids','');
		$remark = $request->input('remark','批量通过');
		if(!empty($ids)) {
			$arr = explode(',', $ids);
			foreach ($arr as $id) {
				$engine = new Engine();
				$engine->agree($id, ['remark' => $remark]);
			}
		}
		return response(['success' => 1], 200);
	}

	/**
	 * 批量同意，审批通过
	 * @param Request $request
	 * @return \Illuminate\Contracts\Routing\ResponseFactory|\Symfony\Component\HttpFoundation\Response
	 * @internal param $id
	 */
	public function batchAgainst(Request $request){
		$ids = $request->input('ids','');
		$remark = $request->input('remark','批量拒绝');
		if(!empty($ids)) {
			$arr = explode(',', $ids);
			foreach ($arr as $id) {
				$engine = new Engine();
				$engine->against($id, ['remark' => $remark]);
			}
		}
		return response(['success' => 1], 200);
	}

	/**
	 * 同意，审批通过
	 * @param Request $request
	 * @param $id
	 * @return \Illuminate\Contracts\Routing\ResponseFactory|\Symfony\Component\HttpFoundation\Response
	 */
	public function agree(Request $request, $id){
		$engine = new Engine();
//		$remark = $request->input('remark','同意，审批通过');
		$variablesStr = $request->input('variables', '{}');
		$variables = json_decode($variablesStr, true);
		try{
			$engine->agree($id, $variables);
			return response(['success' => 1], 200);
		}catch (\Exception $e){
			return response(['success' => 0, 'error' => $e->getMessage()], 401);
		}
	}

	/**
	 * 不同意，审批结束
	 * @param Request $request
	 * @param $id
	 * @return \Illuminate\Contracts\Routing\ResponseFactory|\Symfony\Component\HttpFoundation\Response
	 */
	public function against(Request $request, $id){
		$engine = new Engine();
//		$remark = $request->input('remark','不同意，审批结束');
		$variablesStr = $request->input('variables', '{}');
		$variables = json_decode($variablesStr, true);
		try{
			$engine->against($id, $variables);
			return response(['success' => 1], 200);
		}catch (\Exception $e){
			return response(['success' => 0, 'error' => $e->getMessage()], 401);
		}
	}

}
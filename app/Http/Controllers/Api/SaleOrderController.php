<?php

namespace App\Http\Controllers\Api;

use Illuminate\Database\Eloquent\Builder;
use Illuminate\Http\Request;
use App\Http\Controllers\Api\ApiController;
use App\Models\Busi\SaleOrder;
use Illuminate\Support\Facades\DB;

class SaleOrderController extends ApiController
{
	//
	public function newEntity(array $attributes = [])
	{
		// TODO: Implement newEntity() method.
		return new SaleOrder($attributes);
	}

	public function fillQueryForIndex(Request $request, Builder &$query)
	{
		parent::fillQueryForIndex($request, $query); // TODO: Change the autogenerated stub
		$query->with(['store', 'items.material']);
		$query->whereExists(function($query){
			$query->select(DB::raw(1))
				->from('st_sale_order_items')
				->whereRaw('st_sale_order_items.fsale_order_id = st_sale_orders.id');
		});
	}

	public function store(Request $request)
	{
		$re = true;
		$data = $request->all();
		unset($data['_sign']);
		$entity = SaleOrder::where('fstore_id', $data['fstore_id'])
			->where('femp_id', $data['femp_id'])
			->where('fdate', $data['fdate'])
			->where('fsend_status', 'A')
			->first();
		//
		if(empty($entity)) {
			$fieldErrors = $this->validateFields($data);
			if (!empty($fieldErrors)) {
				return response($fieldErrors, 400);
			}
			$entity = $this->newEntity($data);
			//$entity = Entity::create($data);
			$re = $entity->save();
		}
		//LogSvr::Sync()->info('ModelCreated : '.json_encode($entity));
		$status = $re ? 200 : 400;
		return response($entity, $status);
		//return parent::store($request); // TODO: Change the autogenerated stub
	}

	/**
	 * 订单配送接口
	 * @param Request $request
	 * @param $id
	 * @return \Illuminate\Contracts\Routing\ResponseFactory|\Symfony\Component\HttpFoundation\Response
	 */
	public function distribute(Request $request, $id){
		$entity = SaleOrder::find($id);
		$result = true;
		DB::beginTransaction();
		try {
			$entity->fsend_status = 'C';
			$entity->fdocument_status = 'C';
			$entity->save();
			$entity->items()->update(['fsend_status' => 'C', 'fdocument_status' => 'C']);
			DB::commit();
		}catch (\Exception $e){
			DB::rollBack();
			$result = false;
			$msg = $e->getMessage();
		}
		return $result ? $this->success($result) : $this->fail($msg);
	}
}
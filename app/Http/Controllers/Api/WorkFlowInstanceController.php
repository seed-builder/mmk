<?php

namespace App\Http\Controllers\Api;

use App\Models\Busi\WorkFlowInstanceVariable;
use App\Models\Busi\WorkFlowTask;
use App\Models\Busi\WorkFlowVariable;
use App\Services\WorkFlow\Engine;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Http\Request;
use App\Http\Controllers\Api\ApiController;
use App\Models\Busi\WorkFlowInstance;

class WorkFlowInstanceController extends ApiController
{
	//
	public function newEntity(array $attributes = [])
	{
		// TODO: Implement newEntity() method.
		return new WorkFlowInstance($attributes);
	}

	public function fillQueryForIndex(Request $request, Builder &$query)
	{
		$query->with(['variables', 'workflow', 'sponsor']);
		parent::fillQueryForIndex($request, $query); // TODO: Change the autogenerated stub
	}

	public function index(Request $request)
	{
		$page = $request->input('page', 1);
		$pageSize = $request->input('pageSize', 10);
		$sort = $request->input('sort', 'id asc');
		$entity = $this->newEntity();
		$query = $entity->query();
		$this->fillQueryForIndex($request, $query);
		$count = $query->count();
		$arr = explode(',', $sort);
		//var_dump($arr);
		foreach ($arr as $order) {
			$tmpArr = explode(' ', trim($order));
			$query->orderBy($tmpArr[0], $tmpArr[1]);
		}
		$data = $query->take($pageSize)->skip(($page - 1) * $pageSize)->get();
		//LogSvr::apiSql()->info($query->toSql());
		foreach ($data as &$instance){
			$tasks = WorkFlowTask::where('work_flow_instance_id', $instance->id)->where('status', 0)->get();
			$approvers = [];
			foreach ($tasks as $task){
				$approvers[] = $task->approver;

			}
			$instance->approvers = $approvers;
		}
		return response(['count' => $count, 'list' => $data, 'page' => $page, 'pageSize' => $pageSize], 200);
	}

	public function show($id)
	{
		//return parent::show($id); // TODO: Change the autogenerated stub
		if ($id == 0) {
			return response('{}', 404);
		} else {
			$entity = WorkFlowInstance::with(['variables', 'sponsor','workflow'])->find($id);
			//$entity = $this->newEntity()->newQuery()->find($id);
			// var_dump($entity);
			return response($entity, 200);
		}
	}

	/**
	 * 门店是否在变更审批中
	 * @param Request $request
	 * @return \Illuminate\Contracts\Routing\ResponseFactory|\Symfony\Component\HttpFoundation\Response
	 */
	public function storeValid(Request $request){
		$store_id = $request->input('store_id');
	    $count = WorkFlowInstanceVariable::query()
			->join('work_flow_instances', 'work_flow_instances.id', '=', 'work_flow_instance_variables.work_flow_instance_id')
			->where('work_flow_instances.status', 0)
			->where('work_flow_instance_variables.name', 'store_id')
			->where('work_flow_instance_variables.value', $store_id)
			->count();
		return response(['valid' => $count > 0], 200);
	}

	/**
	 * 保存变量
	 * @param Request $request
	 * @param $id
	 * @return \Illuminate\Contracts\Routing\ResponseFactory|\Symfony\Component\HttpFoundation\Response
	 */
	public function saveVariables(Request $request, $id){
		$variablesStr = $request->input('variables', '{}');
		$variables = json_decode($variablesStr, true);
		$engine = new Engine();
		$res = $engine->saveVariables($id, $variables);
		return response(['success' => $res], 200);
	}

	/**
	 * 撤销
	 * @param Request $request
	 * @param $id
	 * @return \Illuminate\Contracts\Routing\ResponseFactory|\Symfony\Component\HttpFoundation\Response
	 */
	public function dismiss(Request $request, $id){
		$engine = new Engine();
		$res = $engine->dismiss($id);
		return response(['success' => $res], 200);
	}

	public function getApprovers(Request $request, $id){
		$tasks = WorkFlowTask::where('work_flow_instance_id', $id)->where('status', 0)->get();
		$approvers = [];
		foreach ($tasks as $task){
			$approvers[] = $task->approver;
		}
		return $this->success($approvers);
	}

}
<?php
namespace App\Http\Controllers\Admin;

use Illuminate\Http\Request;
use App\Http\Controllers\Admin\AdminController;
use App\Models\Busi\WorkFlowTask;
use Illuminate\Support\Facades\Auth;
use WorkFlowEngine;

class WorkFlowTaskController extends AdminController
{
	public function newEntity(array $attributes = [])
	{
		// TODO: Implement newEntity() method.
		return new WorkFlowTask($attributes);
	}

	/**
	* Display a listing of the resource.
	*
	* @return  \Illuminate\Http\Response
	*/
	public function index()
	{
		//
		return view('admin.work-flow-task.index');
	}

	/**
	* Show the form for creating a new resource.
	*
	* @return  \Illuminate\Http\Response
	*/
	public function create()
	{
		return view('admin.work-flow-task.create');
	}

	/**
	* Display the specified resource.
	*
	* @param    int  $id
	* @return  \Illuminate\Http\Response
	*/
	public function edit($id)
	{
		$entity = WorkFlowTask::find($id);
		return view('admin.work-flow-task.edit', ['entity' => $entity]);
	}

	/**
	* Display the specified resource.
	*
	* @param    int  $id
	* @return  \Illuminate\Http\Response
	*/
	public function show($id)
	{
		//
	}

	/**
	* @param  Request $request
	* @param  array $searchCols
	* @param  array $with
	* @param  null $conditionCall
	* @param  bool $all_columns
	* @return  \Illuminate\Http\JsonResponse
	*/
	public function pagination(Request $request, $searchCols = [], $with=[], $conditionCall = null, $all_columns = false){
		$searchCols = ["action","remark","uid"];
		return parent::pagination($request, $searchCols);
	}

	/**
	 * 我的待办
	 * @param Request $request
	 * @return \Illuminate\Contracts\View\Factory|\Illuminate\View\View
	 */
	public function todo(Request $request){
		return view('admin.work-flow-task.todo');
	}

	public function todoPagination(Request $request){
		$searchCols = ["work_flow_instances.bill_no","work_flow_instances.title","work_flow_instances.sponsor", "work_flows.desc"];
		return parent::pagination($request, $searchCols, [], function ($query){
			$user = Auth::user();
			if(!$user->isAdmin() && !$user->isManager())
			{
				$query->where('work_flow_tasks.approver_id', $user->id);
			}
			$query->where('work_flow_tasks.status' , 0);
		}, true);
	}

	/**
	 * 我的已办
	 * @param Request $request
	 * @return \Illuminate\Contracts\View\Factory|\Illuminate\View\View
	 */
	public function done(Request $request){
		return view('admin.work-flow-task.done');
	}

	public function donePagination(Request $request){
		$searchCols = ["work_flow_instances.bill_no","work_flow_instances.title","work_flow_instances.sponsor", "work_flows.desc"];
		return parent::pagination($request, $searchCols, [], function ($query){
			$user = Auth::user();
			if(!$user->isAdmin() && !$user->isManager())
			{
				$query->where('work_flow_tasks.approver_id', $user->id);
			}
			$query->where('work_flow_tasks.status' , 1)->where('action', '!=', 'start');
		}, true);
	}

	public function entityQuery()
	{
		$query = parent::entityQuery(); // TODO: Change the autogenerated stub
		$query->select(['work_flow_tasks.*', 'work_flow_instances.bill_no','work_flow_instances.title', 'work_flow_instances.sponsor','work_flows.desc', 'sys_users.nick_name as approver'])
			->join('work_flow_instances' , 'work_flow_instances.id', '=', 'work_flow_tasks.work_flow_instance_id')
			->join('work_flows' , 'work_flows.id', '=', 'work_flow_tasks.work_flow_id')
			->join('sys_users' , 'sys_users.id', '=', 'work_flow_tasks.approver_id');
		return $query;
	}

	/**
	 * 同意，审批通过
	 * @param Request $request
	 * @param $id
	 * @return \Illuminate\Contracts\Routing\ResponseFactory|\Symfony\Component\HttpFoundation\Response
	 */
	public function agree(Request $request, $id){
//		$remark = $request->input('remark','同意，审批通过');
		$variablesStr = $request->input('variables', '{}');
		$variables = json_decode($variablesStr, true);
		WorkFlowEngine::agree($id, $variables);
		return $this->success(['success' => 1]);
	}

	/**
	 * 不同意，审批结束
	 * @param Request $request
	 * @param $id
	 * @return \Illuminate\Contracts\Routing\ResponseFactory|\Symfony\Component\HttpFoundation\Response
	 */
	public function against(Request $request, $id){
//		$remark = $request->input('remark','不同意，审批结束');
		$variablesStr = $request->input('variables', '{}');
		$variables = json_decode($variablesStr, true);
		WorkFlowEngine::against($id, $variables);
		return $this->success(['success' => 1]);
	}

	/**
	 * 挂起的任务
	 * @param Request $request
	 * @return \Illuminate\Contracts\View\Factory|\Illuminate\View\View
	 */
	public function suspend(Request $request){
		return view('admin.work-flow-task.suspend');
	}

	public function suspendPagination(Request $request){
		$searchCols = ["work_flow_instances.bill_no","work_flow_instances.title","work_flow_instances.sponsor", "work_flows.desc"];
		return parent::pagination($request, $searchCols, [], function ($query){
//			$user = Auth::user();
//			if(!$user->isAdmin())
//			{
//				$query->where('work_flow_tasks.approver_id', $user->id);
//			}
			$query->where('work_flow_tasks.status' , 4);
		}, true);
	}

	/**
	 * 恢复
	 * @param Request $request
	 * @return \Illuminate\Http\JsonResponse
	 */
	public function resume(Request $request){
		$taskId = $request->input('taskId');
		$userId = $request->input('userId');
		WorkFlowEngine:: resume($taskId, $userId);
		return $this->success(['success' => 1]);
	}

	/**
	 * 移交
	 * @param Request $request
	 * @return \Illuminate\Http\JsonResponse
	 */
	public function transfer(Request $request){
		$taskId = $request->input('taskId');
		$userId = $request->input('userId');
		WorkFlowEngine:: transfer($taskId, $userId);
		return $this->success(['success' => 1]);
	}

}
